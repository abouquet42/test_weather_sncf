// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes, avoid_escaping_inner_quotes, prefer_const_constructors, sort_constructors_first, always_specify_types

import 'dart:async';

import 'package:flutter/widgets.dart';

/// A class generated by flappy_translator package containing localized strings
class I18n {
  static String get loginTitle => _getText('loginTitle');

  static String get exceptionText => _getText('exceptionText');

  static String get emailText => _getText('emailText');

  static String get passwordText => _getText('passwordText');

  static String get validateButton => _getText('validateButton');

  static String get noViewError => _getText('noViewError');

  static String get welcomeTitle => _getText('welcomeTitle');

  static String get celsiusButton => _getText('celsiusButton');

  static String get kelvinButton => _getText('kelvinButton');

  static String get fahrenheitButton => _getText('fahrenheitButton');

  static String get weatherInParisText => _getText('weatherInParisText');

  static String get noForecastText => _getText('noForecastText');

  static String get errorOccurredText => _getText('errorOccurredText');

  static String get retryButton => _getText('retryButton');

  static String get exceptionLogin => _getText('exceptionLogin');

  static late Map<String, String> _localizedValues;

  static const _enValues = {
    'loginTitle': 'Login',
    'exceptionText': 'Exception:',
    'emailText': 'Email',
    'passwordText': 'Password',
    'validateButton': 'Validate',
    'noViewError': 'No view is set for this route',
    'welcomeTitle': 'Welcome',
    'celsiusButton': 'Celsius',
    'kelvinButton': 'Kelvin',
    'fahrenheitButton': 'Fahrenheit',
    'weatherInParisText': 'Weather in Paris',
    'noForecastText': 'There is no forecast to display.',
    'errorOccurredText': 'An error has occurred\, please retry',
    'retryButton': 'Retry',
    'exceptionLogin': 'Login and password are not correct',
  };

  static const _allValues = {
    'en': _enValues,
  };

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = {};
  }

  static late Locale _locale;

  static String _getText(String key) =>
      _localizedValues[key] ?? '** $key not found';

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()]!;
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
